using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xunit;
using Nethereum.Hex.HexTypes;
using Nethereum.Web3;

namespace SamplyGame.Tests
{
    public class Tests
    {
        [Fact]
        public async Task ShouldDeployToxMorden()
        {
            var byteCode = "0x606060405260056000600050556104778061001a6000396000f360606040526000357c010000000000000000000000000000000000000000000000000000000090048063030bb4fc1461005a5780635112711a146100725780635eb164c4146100bb578063ffb8df83146100de57610058565b005b610070600480803590602001909190505061017c565b005b610088600480803590602001909190505061010a565b604051808373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b6100c86004805050610462565b6040518082815260200191505060405180910390f35b6100f46004808035906020019091905050610161565b6040518082815260200191505060405180910390f35b600160005081815481101561000257906000526020600020906002020160005b915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160005054905082565b60026000506020528060005260406000206000915090505481565b60006040604051908101604052806000815260200160008152602001506000600060006000604060405190810160405280600081526020016000815260200150600260005060003373ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000505496508787121561022b5787600260005060003373ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050819055505b600060005054600160005080549050101561034057604060405190810160405280338152602001898152602001509550600160005080548060010182818154818355818115116102de576002028160020283600052602060002091820191016102dd9190610294565b808211156102d95760006000820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000506000905550600101610294565b5090565b5b5050509190906000526020600020906002020160005b88909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff0219169083021790555060208201518160010160005055505050610457565b6000945060009350600092505b6001600050805490508310156103cf57600160005083815481101561000257906000526020600020906002020160005b509150600083141561039f5781600101600050549450845082935083506103c1565b81600101600050548513156103c05781600101600050549450845082935083505b5b5b828060010193505061034d565b848813156104565760406040519081016040528033815260200189815260200150905080600160005085815481101561000257906000526020600020906002020160005b5060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690830217905550602082015181600101600050559050505b5b5b5050505050505050565b60006001600050805490509050610474565b9056";
            var url = "http://192.168.2.211:8545";
            var web3 = new Web3(url);
            await web3.Personal.UnlockAccount.SendRequestAsync("0xbb7e97e5670d7475437943a1b314e661d7a9fa2a", "password", new HexBigInteger(60));
            var tx = await web3.Eth.DeployContract.SendRequestAsync(byteCode, "0xbb7e97e5670d7475437943a1b314e661d7a9fa2a", new HexBigInteger(900000));
            var receipt = await web3.Eth.Transactions.GetTransactionReceipt.SendRequestAsync(tx);
            while (receipt == null)
            {
                receipt = await web3.Eth.Transactions.GetTransactionReceipt.SendRequestAsync(tx);
            }

            var contractAddress = receipt.ContractAddress;
            Assert.NotNull(contractAddress);
        }
    }
}
